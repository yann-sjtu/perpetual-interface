/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface P1OrdersInterface extends utils.Interface {
  functions: {
    "_EIP712_DOMAIN_HASH_()": FunctionFragment;
    "_FILLED_AMOUNT_(bytes32)": FunctionFragment;
    "_PERPETUAL_V1_()": FunctionFragment;
    "_STATUS_(bytes32)": FunctionFragment;
    "trade(address,address,address,uint256,bytes,bytes32)": FunctionFragment;
    "approveOrder((bytes32,uint256,uint256,uint256,uint256,address,address,uint256))": FunctionFragment;
    "cancelOrder((bytes32,uint256,uint256,uint256,uint256,address,address,uint256))": FunctionFragment;
    "getOrdersStatus(bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_EIP712_DOMAIN_HASH_"
      | "_FILLED_AMOUNT_"
      | "_PERPETUAL_V1_"
      | "_STATUS_"
      | "trade"
      | "approveOrder"
      | "cancelOrder"
      | "getOrdersStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_EIP712_DOMAIN_HASH_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_FILLED_AMOUNT_",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_PERPETUAL_V1_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_STATUS_",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrder",
    values: [
      {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersStatus",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "_EIP712_DOMAIN_HASH_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_FILLED_AMOUNT_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERPETUAL_V1_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_STATUS_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersStatus",
    data: BytesLike
  ): Result;

  events: {
    "LogOrderApproved(address,bytes32)": EventFragment;
    "LogOrderCanceled(address,bytes32)": EventFragment;
    "LogOrderFilled(bytes32,bytes32,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogOrderApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOrderFilled"): EventFragment;
}

export interface LogOrderApprovedEventObject {
  maker: string;
  orderHash: string;
}
export type LogOrderApprovedEvent = TypedEvent<
  [string, string],
  LogOrderApprovedEventObject
>;

export type LogOrderApprovedEventFilter =
  TypedEventFilter<LogOrderApprovedEvent>;

export interface LogOrderCanceledEventObject {
  maker: string;
  orderHash: string;
}
export type LogOrderCanceledEvent = TypedEvent<
  [string, string],
  LogOrderCanceledEventObject
>;

export type LogOrderCanceledEventFilter =
  TypedEventFilter<LogOrderCanceledEvent>;

export interface LogOrderFilledEventObject {
  orderHash: string;
  flags: string;
  triggerPrice: BigNumber;
  fill: [BigNumber, BigNumber, BigNumber, boolean] & {
    amount: BigNumber;
    price: BigNumber;
    fee: BigNumber;
    isNegativeFee: boolean;
  };
}
export type LogOrderFilledEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isNegativeFee: boolean;
    }
  ],
  LogOrderFilledEventObject
>;

export type LogOrderFilledEventFilter = TypedEventFilter<LogOrderFilledEvent>;

export interface P1Orders extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: P1OrdersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<[string]>;

    _FILLED_AMOUNT_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<[string]>;

    _STATUS_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    trade(
      sender: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      taker: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrdersStatus(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [[number, BigNumber] & { status: number; filledAmount: BigNumber }[]]
    >;
  };

  _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<string>;

  _FILLED_AMOUNT_(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

  _STATUS_(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  trade(
    sender: PromiseOrValue<string>,
    maker: PromiseOrValue<string>,
    taker: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    arg5: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveOrder(
    order: {
      flags: PromiseOrValue<BytesLike>;
      amount: PromiseOrValue<BigNumberish>;
      limitPrice: PromiseOrValue<BigNumberish>;
      triggerPrice: PromiseOrValue<BigNumberish>;
      limitFee: PromiseOrValue<BigNumberish>;
      maker: PromiseOrValue<string>;
      taker: PromiseOrValue<string>;
      expiration: PromiseOrValue<BigNumberish>;
    },
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    order: {
      flags: PromiseOrValue<BytesLike>;
      amount: PromiseOrValue<BigNumberish>;
      limitPrice: PromiseOrValue<BigNumberish>;
      triggerPrice: PromiseOrValue<BigNumberish>;
      limitFee: PromiseOrValue<BigNumberish>;
      maker: PromiseOrValue<string>;
      taker: PromiseOrValue<string>;
      expiration: PromiseOrValue<BigNumberish>;
    },
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrdersStatus(
    orderHashes: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { status: number; filledAmount: BigNumber }[]
  >;

  callStatic: {
    _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<string>;

    _FILLED_AMOUNT_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

    _STATUS_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    trade(
      sender: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      taker: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, string] & {
        marginAmount: BigNumber;
        positionAmount: BigNumber;
        isBuy: boolean;
        traderFlags: string;
      }
    >;

    approveOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getOrdersStatus(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { status: number; filledAmount: BigNumber }[]
    >;
  };

  filters: {
    "LogOrderApproved(address,bytes32)"(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null
    ): LogOrderApprovedEventFilter;
    LogOrderApproved(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null
    ): LogOrderApprovedEventFilter;

    "LogOrderCanceled(address,bytes32)"(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null
    ): LogOrderCanceledEventFilter;
    LogOrderCanceled(
      maker?: PromiseOrValue<string> | null,
      orderHash?: null
    ): LogOrderCanceledEventFilter;

    "LogOrderFilled(bytes32,bytes32,uint256,tuple)"(
      orderHash?: null,
      flags?: null,
      triggerPrice?: null,
      fill?: null
    ): LogOrderFilledEventFilter;
    LogOrderFilled(
      orderHash?: null,
      flags?: null,
      triggerPrice?: null,
      fill?: null
    ): LogOrderFilledEventFilter;
  };

  estimateGas: {
    _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<BigNumber>;

    _FILLED_AMOUNT_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<BigNumber>;

    _STATUS_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      sender: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      taker: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrdersStatus(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _EIP712_DOMAIN_HASH_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _FILLED_AMOUNT_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _STATUS_(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      sender: PromiseOrValue<string>,
      maker: PromiseOrValue<string>,
      taker: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      arg5: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        flags: PromiseOrValue<BytesLike>;
        amount: PromiseOrValue<BigNumberish>;
        limitPrice: PromiseOrValue<BigNumberish>;
        triggerPrice: PromiseOrValue<BigNumberish>;
        limitFee: PromiseOrValue<BigNumberish>;
        maker: PromiseOrValue<string>;
        taker: PromiseOrValue<string>;
        expiration: PromiseOrValue<BigNumberish>;
      },
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrdersStatus(
      orderHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
